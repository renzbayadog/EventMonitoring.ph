@page "/EventTitle/Update/{Id:int}"
@using EventMonitoring.ph.ViewModels
@using EventMonitoring.ph.Components.Pages.content
@using Newtonsoft.Json
@using codegeneratorlib.Helpers
@using EventMonitoring.ph.Components.Pages.content

@using EventMonitoring.ph.Data.Entities 
 @using EventMonitoring.ph.Data.Repositories 
 @inject IRepositoryWrapper repowrapper

@rendermode InteractiveServer
@inject NavigationManager NavigationManager;

<PageTitle>Create Page</PageTitle>

<ThreeSectionsTemplate>
    <Col9Template>
        @* <AdminHomeHeader /> *@
        <NetcodeHubBreadCrumb BreadCrumbs="crumbs" ReloadPageOnClick="true" BackgroundColor="@BreadCrumbBackgroundColor.SecondarySubtle()" />
        <MudBlazor.MudDivider class="mt5" />
    <div class="row">
        <div class="col-md-12 col-sm-12 col-xs-12">
            <div class="x_panel">               
                <div class="x_content EventTitle-container">
                    <div class="row">
						<div class="modal-header">
							<h5><b>Create New EventTitle</b></h5>
						</div>

                        <EditForm class="form-horizontal form-label-left" id="EventTitle-form" Model="oEventTitleVM" OnValidSubmit="()=>SendRequest()">                           
							<div class="modal-body">
							  <DataAnnotationsValidator />
							  <ValidationSummary />
							  @if (AlertShowMessage)
							  {
							    <div class="alert alert-success" role="alert">
							    	@responseMessage
							    </div>
							  }
							  
							<div class="col-md-12 col-sm-12 col-xs-12 form-group">
								<label>Event Title Venue Name*</label>	
								<input @bind="oEventTitleVM.EventTitleVenueName" id="js-eventtitlevenuename" class="form-control" />
								
							</div>
							<div class="col-md-12 col-sm-12 col-xs-12 form-group">
								<label>Event Title Description*</label>	
								<input @bind="oEventTitleVM.EventTitleDescription" id="js-eventtitledescription" class="form-control" />
								
							</div>
							<div class="col-md-12 col-sm-12 col-xs-12 form-group">
								<label>Event Title Start Time Date*</label>	
								<input type="date" @bind="oEventTitleVM.EventTitleStartTimeDate" id="js-eventtitlestarttimedate" class="form-control" />
								
							</div>
							<div class="col-md-12 col-sm-12 col-xs-12 form-group">
								<label>Event Title End Time Date*</label>	
								<input type="date" @bind="oEventTitleVM.EventTitleEndTimeDate" id="js-eventtitleendtimedate" class="form-control" />
								
							</div>
							<div class="col-md-12 col-sm-12 col-xs-12 form-group">
								<label>Event Title Status</label>	
								<input @bind="oEventTitleVM.EventTitleStatus" id="js-eventtitlestatus" class="form-control" />
								
							</div>
							<div class="col-md-12 col-sm-12 col-xs-12 form-group">
								<label>Event Line Name</label>	
								<select @bind="oEventTitleVM.EventLineId" id="js-eventlineid" class="form-control"><option value="">-- Select --</option>@if (listEventLine != null){@foreach (var item in listEventLine){<option value="@item.EventLineId">@item.EventLineName</option>}}
							</select>
								
							</div>
							</div>
							 <div class="modal-footer">
							   <div class="col-md-12 col-sm-12 col-xs-12 form-group">

									<a href="/EventTitle/Index" class="btn btn-danger btn-custom float-md-end" style="margin-left:10px;">
									<i class="fa fa-close"></i> Cancel Request</a>

							  		@if (Loading)
                                    {
										<button class="btn btn-primary btn-custom float-md-end" type="button" disabled>
                                            <span class="spinner-border spinner-border-sm" aria-hidden="true"></span>
                                            <span role="status">Loading...</span>
                                        </button>
                                    }
                                    else
									{
										<button class="btn btn-primary btn-custom float-md-end" type="submit">
											<i class="fa fa-save"></i> Submit Request
                                        </button>
                                    }
								 </div>	
							 </div>
                        </EditForm> 
                    </div>
                </div>
            </div>
        </div>
    </div>
	    </Col9Template>
    <Col3Template>
        <Banner />
    </Col3Template>
    <FooterTemplate><Footer /></FooterTemplate>
</ThreeSectionsTemplate>

@code {
	[Parameter]
	public int Id { get; set; }

	private EventTitleVM oEventTitleVM = new();
	private string responseMessage;
	private bool Loading = false;
	
	private bool AlertShowMessage = false;

	private List<EventLine> listEventLine => repowrapper.EventLine_Repository.FindAll().ToList();
	private Dictionary<string, string> crumbs = new Dictionary<string, string>()
    {
        {"Home", "/"},
        {"Create New EventTitle", null!}
    };

	protected override async Task OnInitializedAsync()
	{
		var restService = new RestService<EventTitleVM>();
		//var json = JsonConvert.SerializeObject(search);
		var result = new ServiceModel<EventTitleVM>();
		result = await restService.Get($"{AppHelper.CDNFTPConfiguration.PublicHost}/api/EventTitles/GetById/{Id}");
		if (!result.IsSuccess)
		{
			NavigationManager.NavigateTo("/EventTitle/Index");
		}
		else
		{
			oEventTitleVM = result.Data;
		}
	}

	//file upload
	private async Task LoadFiles(InputFileChangeEventArgs e)
	{
		IBrowserFile file = e.File;
		var buffer = new byte[file.Size];
		await file.OpenReadStream().ReadAsync(buffer);
		var bytes = $"{file.Name},{Convert.ToBase64String(buffer)}";
		
	}

	private async Task SendRequest()
	{
		Loading = true;
		var restService = new RestService<List<EventTitleVM>>();

		var json = JsonConvert.SerializeObject(oEventTitleVM);


		var result = new ServiceModel<List<EventTitleVM>>();

		result = await restService.Post($"{AppHelper.CDNFTPConfiguration.PublicHost}/api/EventTitles/update", json);

		if (!result.IsSuccess)
		{
			responseMessage = result.Error;
		}
		else
		{

			NavigationManager.NavigateTo($"/EventTitle/Details/{Id}");
		}

		Loading = false;
	}
}