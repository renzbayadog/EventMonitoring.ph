@page "/EventLine/Index"
@using EventMonitoring.ph.ViewModels 
 @using EventMonitoring.ph.Data.Entities
@using EventMonitoring.ph.Components.Pages.content
@using Newtonsoft.Json
@using codegen.Extensions
@using codegeneratorlib.Helpers
@attribute [StreamRendering]
@rendermode InteractiveServer
@inject NavigationManager NavigationManager;

<PageTitle>List Page</PageTitle>

<!-- page content -->
<ThreeSectionsTemplate>
    <Col9Template>
        @* <AdminHomeHeader /> *@
        <NetcodeHubBreadCrumb BreadCrumbs="crumbs" ReloadPageOnClick="true" BackgroundColor="@BreadCrumbBackgroundColor.SecondarySubtle()" />
        @* <MudBlazor.MudDivider class="mt5" /> *@
        <br />
    <div class="row">
        <div class="col-md-12 col-sm-12 col-xs-12">
            <div class="x_panel">
                <div class="x_content js-EventLine-main-container">
                        <div class="row">
                            <!--BUTTON TOP-->
                            <div class="col-md-12 col-sm-12 col-xs-12">
                                @if(Print){

                                <button class="btn btn-dark btn-custom float-end" id="js-export-EventLine" @onclick="()=>PrintReport()"><i class="fa fa-print"></i> Print</button>
                                }
                                @if(Export){
                                <button class="btn btn-warning btn-custom float-end" id="js-export-EventLine" @onclick="()=>ExportFile()"><i class="fa fa-download"></i> Export Data</button>

                                }
                                @if(Add){
                                    <button class="btn btn-primary btn-custom float-end popup" @onclick="()=>OpenModal(0)"><i class="fa fa-plus"></i> Create New</button>
                                }
                               
                            </div>
                            <div class="col-md-12 col-sm-12 col-xs-12">
                                <MudBlazor.MudDivider class="mt5" />
                            </div>
                        </div>
                            <!--SEARCH AREA-->
                            <div class="row" >
                                <form class="form-horizontal" id="search-EventLine-form" @onsubmit="()=>SearchEventLine()">
                                <div class="col-md-12 col-sm-12 col-xs-12 form-group">
                                        <label>Search by: (EventLineName)</label>
                                        <input class="form-control" id="js-Keyword-search" @bind="searchInfo.Keyword" />
                                    </div>
                                    <div class="col-md-6 col-sm-6 col-xs-6 form-group">
                                        <label>Page Size:</label>
                                        <select class="form-control" id="js-page-size" @bind="PageSize">
                                            <option disabled>Max rows</option>
                                            <option value="10">10</option>
                                            <option value="20">20</option>
                                            <option value="30">30</option>
                                            <option value="40">40</option>
                                            <option value="50">50</option>
                                            <option value="100">100</option>
                                        </select>
                                    </div>
                                    <div class="col-md-6 col-sm-6 col-xs-6 form-group" style="margin-top:20px;">
                                        <button type="submit" class="btn btn-primary btn-custom"><i class="fa fa-search"></i> Search</button>
                                    </div>
                                </form>
                            </div>

						<div class="row">
							<!--BULK BUTTON-->
							<div class="col-md-12 col-sm-12 col-xs-12" style="display:none" id="js-delete-container">
								<button class="btn btn-primary btn-md btn-custom fa fa-trash" id="js-delete-bulk">Delete</button>
							</div>
                             @if (pEventLines == null)
                             {
                                 <br />
                                 <p>Loading..</p>
                             }
                             else
                             {
							<!--DATA TABLE-->
                                <div class="col-md-12 col-sm-12 col-xs-12 js-EventLine-list-container">
                                    <table class="table table-hover bulk_action" id="js-table-EventLine" style="margin-top:10px;">
                                        <thead>
                                            <tr>
                                                <th class="column-title">Event Line Name</th>
                                                <th class="column-title no-link last"><span class="nobr">Action</span></th>
                                            </tr>
                                        </thead>
                                        <tbody id="js-load-EventLine-row">
                                            @foreach (var EventLine in pEventLines.List)
                                            {
                                                <tr id="selected-row-eventlineid">
                                                    <td>@EventLine.EventLineName</td>
                                                    <td>
                                                        <a href="/EventLine/Details/@EventLine.EventLineId" class="popup">
                                                            <i class="fa fa-info-circle"></i></a> 
                                                        <a style="cursor:pointer" @onclick="()=>OpenModal(EventLine.EventLineId)" class="popup">
                                                            <i class="fa fa-edit"></i></a> 
                                                        <a @onclick="()=>DeleteEventLine(EventLine.EventLineId)" style="cursor:pointer" id="js-EventLine-delete" data-id="EventLineId">
                                                            <i class="fa fa-trash-o"></i></a>
                                                    </td>
                                                </tr>
                                            }
                                        </tbody>
                                    </table>
                                </div>

							 <!--PAGINATION AND SUMMARY-->
							<div class="col-md-12 col-sm-12 col-xs-12 js-pagination-EventLine" style="">

								<div id="js-page-history" style="float:left;margin-top:25px;color:#cc503b;">
									<!--PAGINATION HISTORY-->
                                    @pEventLines?.PageSummary
								</div>

								<div style="float:right;margin-top:20px;">
									<ul class="pagination pagination-md" id="js-ul-pagination">
                                    <!--LOAD PAGINATION-->
                                    @* <li id="js-prev-btn"><a class="page-link" style="cursor:pointer;" @onclick="()=>ClickPaginationPrev()">&laquo;</a></li> *@
                                    @for (var i = 0; i < @pEventLines?.PageIndices?.Count(); i++)
                                    {
                                        var pageNum = @pEventLines?.PageIndices?.ToArray()[i];

                                        <li id="js-li-count-@pageNum" class="check page-item li-children-ref" data-id="@pageNum">
                                            <a style="cursor:pointer;" class="page-link" id="click-User-pagination-@pageNum" @onclick="()=>ClickPagination(pageNum)" data-id="@pageNum">
                                                @pageNum
                                            </a>
                                        </li>
                                    }
                                    @* <li id="js-next-btn"><a class="page-link" style="cursor:pointer;" @onclick="()=>ClickPaginationNext()">&raquo;</a></li> *@
									</ul>
							   </div>
						</div>
                       }
					</div>
				</div>
            </div>
        </div>
        </div>

    </Col9Template>
    <Col3Template>
        <Banner />
    </Col3Template>
    <FooterTemplate><Footer /></FooterTemplate>
</ThreeSectionsTemplate>


<EventLineModal @ref="modalRef" ModalTitle="EventLine">
    <p>This is modal content.</p>
</EventLineModal>
<NetcodeHubToast @ref="ToastComponent" Duration="4000" />

@code {

    private EventLineSearch searchInfo = new();
    private PaginationVM<EventLineVM> pEventLines;
    private EventLineVM oEventLineVM = new();
    private string responseMessage;
    private int PageSize = 10;
    private int CurrentPage = 1;
    private EventLineModal modalRef;
    NetcodeHubToast ToastComponent;
    private Dictionary<string, string> crumbs = new Dictionary<string, string>()
    {
        {"Home", "/"},
        {"EventLine List", null!}
    };

    [CascadingParameter]
    public Task<AuthenticationState> userAuthState { get; set; }
    bool CanManageUser = false;
    bool Add = false;
    bool Update = false;
    bool Delete = false;
    bool Read = false;
    bool Print = false;
    bool Export = false;

    protected override async Task OnInitializedAsync()
    {
        if ((!customAuthorizationService.CustomClaimChecker((await userAuthState!).User, DefaultClaims.ManageUser)))
            NavManager.NavigateTo("Account/Access-Denied");

        CanManageUser = customAuthorizationService.CustomClaimChecker((await userAuthState!).User, DefaultClaims.ManageUser);
        Add = customAuthorizationService.CustomClaimChecker((await userAuthState!).User, DefaultClaims.Add);
        Update = customAuthorizationService.CustomClaimChecker((await userAuthState!).User, DefaultClaims.Update);
        Delete = customAuthorizationService.CustomClaimChecker((await userAuthState!).User, DefaultClaims.Delete);
        Read = customAuthorizationService.CustomClaimChecker((await userAuthState!).User, DefaultClaims.Read);
        Print = customAuthorizationService.CustomClaimChecker((await userAuthState!).User, DefaultClaims.Print);
        Export = customAuthorizationService.CustomClaimChecker((await userAuthState!).User, DefaultClaims.Export);

        var search = new EventLineSearch();
        search.Keyword = searchInfo?.Keyword;
        var list = await LoadEventLine(CurrentPage, PageSize, search);
        pEventLines = list;
    }

    private async Task ExportFile()
    {
        var restService = new RestService<ExcelData>();
        //var json = JsonConvert.SerializeObject(search);
        var result = new ServiceModel<ExcelData>();
        result = await restService.Get($"{AppHelper.CDNFTPConfiguration.PublicHost}/api/EventLines/export/report");
        if (!result.IsSuccess)
        {
        }
        else
        {
            var file = $"data:application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=utf-8;base64,{result.Data.File}";

            NavigationManager.NavigateTo(file);
        }
    }

    private async Task PrintReport()
    {
    }

    private async Task<PaginationVM<EventLineVM>> LoadEventLine(int? currpage, int pagesize, EventLineSearch search)
    {
        var restService = new RestService<PaginationVM<EventLineVM>>();
        //var json = JsonConvert.SerializeObject(search);
        var result = new ServiceModel<PaginationVM<EventLineVM>>();
        result = await restService.Get($"{AppHelper.CDNFTPConfiguration.PublicHost}/api/EventLines/List/Page{currpage}/PageSize{pagesize}?Keyword={search?.Keyword}");
        if (!result.IsSuccess)
        {
            return pEventLines = null;
        }
        else
        {
            return pEventLines = result.Data;
        }
    }

    private async Task OpenModal(int id)
    {
        await modalRef.Show(id);
    }

    private async Task SearchEventLine()
    {
        var search = new EventLineSearch();
        search.Keyword = searchInfo?.Keyword;
        var list = await LoadEventLine(CurrentPage, PageSize, search);
        pEventLines = list;
    }

    private async Task CreateEventLine()
    {
        var restService = new RestService<List<EventLineVM>>();
        var result = new ServiceModel<List<EventLineVM>>();

        var json = JsonConvert.SerializeObject(oEventLineVM);

        result = await restService.Post($"{AppHelper.CDNFTPConfiguration.PublicHost}/api/EventLines/add", json);

        if (!result.IsSuccess)
        {
            responseMessage = result.Error;
        }
        else
        {
            var search = new EventLineSearch();
            search.Keyword = searchInfo?.Keyword;
            var list = await LoadEventLine(CurrentPage, PageSize, search);
            pEventLines = list;
        }
    }

    private async Task UpdateEventLine()
    {
        var restService = new RestService<List<EventLineVM>>();

        var json = JsonConvert.SerializeObject(oEventLineVM);

        var result = new ServiceModel<List<EventLineVM>>();

        result = await restService.Post($"{AppHelper.CDNFTPConfiguration.PublicHost}/api/EventLines/update", json);

        if (!result.IsSuccess)
        {
            responseMessage = result.Error;
        }
        else
        {
            var search = new EventLineSearch();
            search.Keyword = searchInfo?.Keyword;
            var list = await LoadEventLine(CurrentPage, PageSize, search);
            pEventLines = list;
        }
    }

    public async Task DeleteEventLine(int id)
    {
        var restService = new RestService<List<EventLineVM>>();

        var result = new ServiceModel<List<EventLineVM>>();

        result = await restService.Delete($"{AppHelper.CDNFTPConfiguration.PublicHost}/api/EventLines/{id}/delete");

        if (!result.IsSuccess)
        {
            responseMessage = result.Error;

            await ToastComponent!.ShowErrorToast("Error", responseMessage);
        }
        else
        {
            var search = new EventLineSearch();
            search.Keyword = searchInfo?.Keyword;
            var list = await LoadEventLine(CurrentPage, PageSize, search);
            pEventLines = list;

            await InvokeAsync(() => StateHasChanged());

            await ToastComponent!.ShowSuccessToast("Success", "Successfully Deleted!");
        }
    }

    private async Task ClickPagination(int? elementId)
    {
        var currrentPage = elementId;
        var search = new EventLineSearch();
        search.Keyword = searchInfo?.Keyword;
        var list = await LoadEventLine(currrentPage, PageSize, search);
        pEventLines = list;
    }
}