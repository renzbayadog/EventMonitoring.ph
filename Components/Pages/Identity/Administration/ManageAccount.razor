@page "/administration/account/users/account"
@using EventMonitoring.ph.Components.Pages.General
@using EventMonitoring.ph.Components.Pages.content
@using Microsoft.AspNetCore.SignalR.Client
@using System.Security.Claims
@using codegen.Extensions
@using codegen.ViewModels
@rendermode InteractiveServer
@implements IDisposable
<PageTitle>Add User</PageTitle>
<ThreeSectionsTemplate>
    <Col9Template>
        <AdminHomeHeader />
        <NetcodeHubBreadCrumb BreadCrumbs="crumbs" ReloadPageOnClick="true" BackgroundColor="@BreadCrumbBackgroundColor.SecondarySubtle()" />
       
    </Col9Template>
    <Col3Template>
        <Banner />
    </Col3Template>
    <FooterTemplate><Footer /></FooterTemplate>
</ThreeSectionsTemplate>

<NetcodeHubToast @ref="ToastComponent" Duration="4000" />

@code {

    [CascadingParameter]
    public Task<AuthenticationState> userAuthState { get; set; }
    private Dictionary<string, string> crumbs = new Dictionary<string, string>()
    {
        {"Home", "administrator/account"},
        {"Manage Account", null!}
    };
    private UserCreateRequestDTO UserModel { get; set; } = new();
    NetcodeHubToast ToastComponent;
    private bool Loading = false;
    List<string> Policies = new List<string>(){
            new string(Policy.AdminPolicy),
            new string(Policy.UserPolicy),
            new string(Policy.ManagerPolicy) };

    private HubConnection hub;

    public async Task RegisterAsync()
    {
        Loading = true;
        await Task.Delay(3000);
        var result = await accountService.CreateUserAsync(UserModel);
        await accountService.SaveActivityTrackerAsync(new ActivityTrackerRequestDTO()
            {
                UserId = Convert.ToInt32((await userAuthState!).User.Claims.FirstOrDefault(_ => _.Type == ClaimTypes.Name)!.Value),
                Title = "Created New User Method called",
                Description = result.message,
                Date = DateTime.Now,
                OperationState = result.flag.ToString()
            });

        if (result.flag)
        {
            await ToastComponent!.ShowSuccessToast("Info", result.message);
            UserModel = new();
        }
        else
        {
            await ToastComponent!.ShowErrorToast("Alert", result.message);
            UserModel = new();
        }

        Loading = false;
    }

    protected async override Task OnInitializedAsync()
    {
        if ((!customAuthorizationService.CustomClaimChecker((await userAuthState!).User, DefaultClaims.ManageUser)))
            NavManager.NavigateTo("Account/Access-Denied");

        passwordState.Changed += StateHasChanged;
        homeGenericState.StateChanged += StateButtonClicked;

        hub = netcodeHubConnectionService.GetHubConnection();
        hub.On<string>("Notify", async (clientId) =>
        {
            await CallWhenNotified();
        });

        if (hub == null)
        {
            await hub!.StartAsync();
        }
    }

    async Task CallWhenNotified()
    {
        await InvokeAsync(async () =>
        {
            StateHasChanged();
            await adminActiveOrderCountState.GetActiveOrdersCount();
        });
    }

    void StateButtonClicked()
    {
        var adminurl = "app/administration/products/orders";
        if (homeGenericState.IsAdmin)
            NavManager.NavigateTo($"{adminurl}/{homeGenericState.StateName}");
    }

    void ChangePasswordType() => passwordState.ChangePasswordType();

    public void Dispose()
    {
        homeGenericState.StateChanged -= StateButtonClicked;
        passwordState.Changed -= StateHasChanged;
    }
}