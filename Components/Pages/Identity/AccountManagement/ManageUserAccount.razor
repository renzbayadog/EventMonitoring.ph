@page "/account/users/profile"
@using System.Security.Claims
@using EventMonitoring.ph.Components.Pages.General
@using EventMonitoring.ph.Components.Pages.content
@using Mapster
@using Microsoft.AspNetCore.SignalR.Client
@using System.Security.Claims
@using MudBlazor
@using codegen.Extensions
@using codegen.ViewModels
@rendermode InteractiveServer
@implements IDisposable

<PageTitle>Manage Your Account</PageTitle>
<TwoSectionsTemplate>
    <Col12Template>
        @* <AdminHomeHeader /> *@
        <NetcodeHubBreadCrumb BreadCrumbs="crumbs" ReloadPageOnClick="true" BackgroundColor="@BreadCrumbBackgroundColor.PrimarySubtle()" />
        <div class="row mt-3">
            @if (UsersClaim != null)
            {
                @foreach (var userClaim in UsersClaim)
                {
                    <div class="col-auto mb-3">
                        <div class="card border-success shadow-lg">
                            <div class="card-body">
                                <MudTreeView T="string" Dense="true" Hover="true" Class="text-primary">
                                    <MudTreeViewItem Icon="" Value="@($"Full Name: {userClaim.UserInfo.FirstName} {userClaim.UserInfo.MiddleInitial} {userClaim.UserInfo.LastName}")" Class="text-success" />
                                    <MudTreeViewItem Icon="" Value="@($"Role: {userClaim.RoleName}")" Class="text-success" />
                                    <MudTreeViewItem Icon="" Value="@($"Email: {userClaim.Email}")" Class="text-dark" />
                                    <MudTreeViewItem Icon="" Value="@($"Create: {userClaim.Add}")" Class="text-warning" />
                                    <MudTreeViewItem Icon="" Value="@($"Update: {userClaim.Update}")" Class="text-info" />
                                    <MudTreeViewItem Icon="" Value="@($"Delete: {userClaim.Delete}")" Class="text-danger" />
                                    <MudTreeViewItem Icon="" Value="@($"Read: {userClaim.Read}")" Class="text-success" />
                                    <MudTreeViewItem Icon="" Value="@($"Print: {userClaim.Print}")" Class="text-danger" />
                                    <MudTreeViewItem Icon="" Value="@($"Export File: {userClaim.Export}")" Class="text-success" />
                                    <MudTreeViewItem Icon="" Value="@($"User Management: {userClaim.ManagerUser}")" Class="text-warning" />
                                    <MudDivider />
                                    <button class="btn text-info nav-link float-end btn-sm" @onclick="()=>ManageUserClicked(userClaim)">
                                        <i class="mdi mdi-pencil"> Edit</i>
                                    </button>
                                </MudTreeView>
                            </div>
                            <div class="card-footer">

                            </div>
                        </div>
                    </div>
                }
            }
        </div>
    </Col12Template>
    <FooterTemplate>
        <Footer />
    </FooterTemplate>
</TwoSectionsTemplate>

<Modal @bind-Open="IsOpen"
       BootstrapClass="border-info rounded p-2 ml-2 mr-2 align-item-conter position-absolute top-50 start-50 translate-middle"
       CustomStyle="width:300px;margin-top:10px;">
    <ContentContent>
        <div class="card p-3 shadow-lg border-success">
            <div class="card-title text-center text-info d-flex justify-content-between">
                <i class="d-flex mdi mdi-pencil text-primary fs-3"></i>
                <span class="d-flex">Manage Permissions</span>
                <i class="mdi mdi-close text-danger fw-bold menu-icon fs-3 d-flex"
                   style="cursor:pointer" @onclick="()=>CloseModalDialog()"></i>
            </div>
            <div class="card-body">
                <h5>@ChangeUserClaim.UserInfo?.FirstName @ChangeUserClaim.UserInfo?.LastName (@ChangeUserClaim.Name)</h5>
                <EditForm Model="ChangeUserClaim" OnValidSubmit="SaveChanges">
                    <DataAnnotationsValidator />
                    <div class="form-group mt-3">
                        <label class="form-label">Create</label>
                        <InputSelect @bind-Value="ChangeUserClaim.Add" class="form-select">
                            @if (ChangeUserClaim.Add)
                            {
                                <option selected value="true">True</option>
                                <option value="false">False</option>
                            }
                            else
                            {
                                <option selected value="false">False</option>
                                <option value="true">True</option>
                            }
                        </InputSelect>
                    </div>

                    <div class="form-group mt-3">
                        <label class="form-label">Update</label>
                        <InputSelect @bind-Value="ChangeUserClaim.Update" class="form-select">
                            @if (ChangeUserClaim.Update)
                            {
                                <option selected value="true">True</option>
                                <option value="false">False</option>
                            }
                            else
                            {
                                <option selected value="false">False</option>
                                <option value="true">True</option>
                            }
                        </InputSelect>
                    </div>

                    <div class="form-group mt-3">
                        <label class="form-label">Delete</label>
                        <InputSelect @bind-Value="ChangeUserClaim.Delete" class="form-select">
                            @if (ChangeUserClaim.Delete)
                            {
                                <option selected value="true">True</option>
                                <option value="false">False</option>
                            }
                            else
                            {
                                <option selected value="false">False</option>
                                <option value="true">True</option>
                            }
                        </InputSelect>
                    </div>

                    <div class="form-group mt-3">
                        <label class="form-label">Read</label>
                        <InputSelect @bind-Value="ChangeUserClaim.Read" class="form-select">
                            @if (ChangeUserClaim.Read)
                            {
                                <option selected value="true">True</option>
                                <option value="false">False</option>
                            }
                            else
                            {
                                <option selected value="false">False</option>
                                <option value="true">True</option>
                            }
                        </InputSelect>
                    </div>

                    <div class="form-group mt-3">
                        <label class="form-label">Print</label>
                        <InputSelect @bind-Value="ChangeUserClaim.Print" class="form-select">
                            @if (ChangeUserClaim.Print)
                            {
                                <option selected value="true">True</option>
                                <option value="false">False</option>
                            }
                            else
                            {
                                <option selected value="false">False</option>
                                <option value="true">True</option>
                            }
                        </InputSelect>
                    </div>

                    <div class="form-group mt-3">
                        <label class="form-label">Export</label>
                        <InputSelect @bind-Value="ChangeUserClaim.Export" class="form-select">
                            @if (ChangeUserClaim.Export)
                            {
                                <option selected value="true">True</option>
                                <option value="false">False</option>
                            }
                            else
                            {
                                <option selected value="false">False</option>
                                <option value="true">True</option>
                            }
                        </InputSelect>
                    </div>

                    <div class="form-group mt-3">
                        <label class="form-label">Role</label>
                        @if (Roles != null && !string.IsNullOrEmpty(ChangeUserClaim.RoleName))
                        {
                            <InputSelect @bind-Value="ChangeUserClaim.RoleName" class="form-select">
                                @{
                                    string roleName = "";
                                }
                                @if (ChangeUserClaim.RoleName.Equals(Policy.RoleClaim.Admin))
                                {
                                    roleName = Policy.RoleClaim.Admin;
                                    <option selected value="Admin">@Policy.RoleClaim.Admin</option>
                                }
                                else if (ChangeUserClaim.RoleName.Equals(Policy.RoleClaim.Manager))
                                {
                                    roleName = Policy.RoleClaim.Manager;
                                    <option selected value="Manager">@Policy.RoleClaim.Manager</option>
                                }
                                else
                                {
                                    roleName = @Policy.RoleClaim.User;
                                    <option selected value="User">@Policy.RoleClaim.User</option>
                                }
                                @foreach (var role in Roles)
                                {
                                    if (!role.Equals(roleName))
                                    {
                                        <option value="@role">@role</option>
                                    }
                                }
                            </InputSelect>
                        }
                    </div>

                    <div class="form-group mt-3">
                        <label class="form-label">Manage User</label>
                        <InputSelect @bind-Value="ChangeUserClaim.ManagerUser" class="form-select">
                            @if (ChangeUserClaim.ManagerUser)
                            {
                                <option selected value="true">True</option>
                                <option value="false">False</option>
                            }
                            else
                            {
                                <option selected value="false">False</option>
                                <option value="true">True</option>
                            }
                        </InputSelect>
                    </div>

                    <div class="form-group mt-3">
                        @if (Loading)
                        {
                            <GenericSpinnerButton ButtonClass="btn btn-info btn-sm float-end" Text="Saving..." />
                        }
                        else
                        {
                            <button class="btn btn-info float-end btn-sm" type="Submit">Save</button>
                        }
                    </div>
                </EditForm>
            </div>
        </div>
    </ContentContent>
</Modal>

<NetcodeHubToast Duration="2000" IconClass="mdi mdi-content-duplicate menu-icon fs-4" @ref="ToastComponent" />
@code {
    [CascadingParameter]
    public Task<AuthenticationState> userAuthState { get; set; }
    private Dictionary<string, string> crumbs = new Dictionary<string, string>()
    {
        {"Home", "administrator/manage user"},
        {"Manage Users", null!}
    };
    public bool IsOpen { get; set; }
    void OpenModal() => IsOpen = true;
    ClaimChangeUserRequestDTO ChangeUserClaim = new();
    NetcodeHubToast ToastComponent;
    private HubConnection hub;
    private UserCreateRequestDTO UserModel { get; set; } = new();
    List<string> Policies = new List<string>(){
            new string(Policy.AdminPolicy),
            new string(Policy.UserPolicy),
            new string(Policy.ManagerPolicy)
    };
    List<string> Roles = new List<string>(){
            new string(Policy.RoleClaim.User),
            new string(Policy.RoleClaim.Manager),
            new string(Policy.RoleClaim.Admin)
    };
    private bool Loading = false;
    private ClaimGetUserResponseDTO User { get; set; } = new();
    private IEnumerable<ClaimGetUserResponseDTO> UsersClaim { get; set; } = [];

    async Task GetUsersWithClaims()
    {
        UsersClaim = await accountService.GetUserWithClaimAsync();
    }

    protected async override Task OnInitializedAsync()
    {
        if ((!customAuthorizationService.CustomClaimChecker((await userAuthState!).User, DefaultClaims.ManageUser)))
            NavManager.NavigateTo("Account/Access-Denied");

        await GetUsersWithClaims();
        passwordState.Changed += StateHasChanged;
        homeGenericState.StateChanged += StateButtonClicked;

        hub = netcodeHubConnectionService.GetHubConnection();
        hub.On<string>("Notify", async (clientId) =>
        {
            await CallWhenNotified();
        });

        if (hub == null)
        {
            await hub!.StartAsync();
        }
    }

    async Task CallWhenNotified()
    {
        await InvokeAsync(async () =>
        {
            StateHasChanged();
            await adminActiveOrderCountState.GetActiveEventCount();
        });
    }

    void StateButtonClicked()
    {
        var adminurl = "administration/account/users/manage";
        if (homeGenericState.IsAdmin)
            NavManager.NavigateTo($"{adminurl}/{homeGenericState.StateName}");
    }


    async Task SaveChanges()
    {
        Loading = true;

        await Task.Delay(3000);
        var result = await accountService.UpdateUserAsync(ChangeUserClaim);

        var userEmail = (await userAuthState!).User.Claims.FirstOrDefault(_ => _.Type == ClaimTypes.Email)!.Value;
        var userData = await accountService.GetUserWithClaimEmailAsync(userEmail);

        await accountService.SaveActivityTrackerAsync(new ActivityTrackerRequestDTO()
            {
                UserId = userData.UserId,
                Title = "Update User Permision Method called",
                Description = result.message,
                Date = DateTime.Now,
                OperationState = result.flag.ToString()
            });

        if (result.flag)
        {
            await ToastComponent!.ShowSuccessToast("Updated User Permission", result.message);
            await GetUsersWithClaims();

            CloseModalDialog();
        }
        else
        {
            await ToastComponent!.ShowSuccessToast("Failed To Update Permission", result.message);
        }

        Loading = false;
    }

    void ManageUserClicked(ClaimGetUserResponseDTO user)
    {
        user.Adapt(ChangeUserClaim);
        OpenModal();
    }

    void CloseModalDialog()
    {
        ChangeUserClaim = new();
        IsOpen = false;
    }
    public void Dispose()
    {
        Loading = false;

        homeGenericState.StateChanged -= StateButtonClicked;
        passwordState.Changed -= StateHasChanged;

    }
}