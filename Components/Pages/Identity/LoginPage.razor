@page "/Account/login"
@using EventMonitoring.ph.Components.Pages.General
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using codegen.Interface.Identity
@using codegen.ViewModels
@inject IAccount  AccountService
@attribute [AllowAnonymous]



@* <EditForm Model="LoginModel" method="post" OnValidSubmit="LoginAsync" FormName="Login" Enhance>

    <DataAnnotationsValidator />
    <div class="mb-3">
        <label for="exampleInputEmail1" class="form-label">Email address</label>
        <input type="email" class="form-control" id="exampleInputEmail1" aria-describedby="emailHelp">
        <div id="emailHelp" class="form-text">We'll never share your email with anyone else.</div>
    </div>
    <div class="mb-3">
        <label for="exampleInputPassword1" class="form-label">Password</label>
        <input type="password" class="form-control" id="exampleInputPassword1">
    </div>
    <div class="mb-3 form-check">
        <input type="checkbox" class="form-check-input" id="exampleCheck1">
        <label class="form-check-label" for="exampleCheck1">Check me out</label>
    </div>
    <button type="submit" class="btn btn-primary">Submit</button>
</EditForm> *@

<EditForm Model="LoginModel" method="post" OnValidSubmit="LoginAsync" FormName="Login" Enhance>
    <div class="card border-primary shadow-lg text-dark p-5" style="border-radius:24px;min-width:300px;">
        <div class="card-header text-dark fs-4 border-primary">Login</div>
        <div class="card-body" style="opacity:1">
            <DataAnnotationsValidator />
            <div class="form-floating mb3">
                <InputText @bind-Value="LoginModel.Email" class="form-control" autocomplete="username" aria-busy="@Isbusy" />
                <label for="email" class="form-label">Email Address</label>
            </div>
            <div><br /></div>
            <div class="form-floating mb3">
                <InputText @bind-Value="LoginModel.Password"
                           class="form-control" autocomplete="password" aria-busy="@Isbusy" />
                <label for="password" class="form-label">User Password</label>
            </div>
            <div class="form-group align-content-end">
                @if (Loading)
                {
                    <GenericSpinnerButton ButtonClass="btn btn-info btn-sm float-end" Text="Logging in..." />
                }
                else
                {
                    <button class="float-end btn btn-success mt-4 w-50" type="submit" style="position:absolute">Login</button>
                }
            </div>
            <hr class="text-primary" />
        </div>

        <div class="card-footer mt-5">
            @if (@ErrorMessage != "")
            {
                <div class="alert alert-danger">@ErrorMessage</div>

            }
            else
            {
                <ValidationSummary class="form-control text-danger text-decoration-line-through">

                </ValidationSummary>

            }
        </div>
    </div>
</EditForm> 

@code {
    string ErrorMessage = "";
    public bool Isbusy { get; set; } = false;

    [SupplyParameterFromForm]
    private UserLoginRequestDTO LoginModel { get; set; } = new();
    private bool Loading = false;

    private async Task LoginAsync()
    {
        Loading = true;

        await Task.Delay(3000);
        if (Isbusy) return;
        ErrorMessage = "";
        Isbusy = true;
        var response = await AccountService.LoginAsync(LoginModel);
        if (!response.flag)
        {
            Isbusy = false;
            Loading = false;
            ErrorMessage = response.message;
            return;
        }
        Isbusy = false;
        Loading = false;
        NavManager.NavigateTo("/app/home", true);
    }

    [CascadingParameter]
    public Task<AuthenticationState> ClientAuthState { get; set; }
    protected override async Task OnInitializedAsync()
    {
        try
        {
            if ((await ClientAuthState!).User.Identity!.IsAuthenticated == true)
                NavManager.NavigateTo("/app/home", false, true);

        }
        catch (Exception)
        {
        }
    }
}
