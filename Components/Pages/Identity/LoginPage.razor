@page "/Account/login"
@using EventMonitoring.ph.Components.Pages.General
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using codegen.Extensions.Identity
@using codegen.Interface.Identity
@using codegen.ViewModels
@inject IAccount  AccountService
@attribute [AllowAnonymous]


<div class="row">
    <div class="col-md-12 col-sm-12 col-xs-12">

        <EditForm Model="LoginModel" method="post" OnValidSubmit="LoginAsync" FormName="Login" Enhance>
            <div class="card border-primary shadow-lg text-dark p-5" style="border-radius:24px;min-width:300px;">
                <div class="card-header text-dark fs-4 border-primary">Login</div>
                <div class="card-body" style="opacity:1">
                    <DataAnnotationsValidator />
                    <div class="form-floating mb3">
                        <InputText @bind-Value="LoginModel.Email" class="form-control" autocomplete="username" aria-busy="@Isbusy" />
                        <label for="email" class="form-label">Email Address</label>
                    </div>
                    <div><br /></div>
                    <div class="form-floating mb3">
                        <InputText @bind-Value="LoginModel.Password"
                                   class="form-control" autocomplete="password" aria-busy="@Isbusy" />
                        <label for="password" class="form-label">User Password</label>
                    </div>
                    <div class="form-group align-content-end">
                        @if (Loading)
                        {
                            <button class="float-end btn btn-success mt-4 w-50" type="button" style="position:absolute" disabled>
                                <span class="spinner-border spinner-border-sm" aria-hidden="true"></span>
                                <span role="status">Logging in...</span>
                            </button>
                        }
                        else
                        {
                            <button class="float-end btn btn-success mt-4 w-50" type="submit" style="position:absolute">Login</button>
                        }
                    </div>
                    <div class="form-group align-content-end">

                        @if (!string.IsNullOrEmpty(ErrorMessage))
                        {
                            <div class="alert alert-danger" style="margin-top:30px;">@ErrorMessage</div>

                        }
                        else
                        {
                            <ValidationSummary class="form-control text-danger text-decoration-line-through" style="padding:30px;margin-top:50px;">

                            </ValidationSummary>
                        }
                    </div>
                </div>


                <div class="card-footer mt-5">

                </div>
            </div>
        </EditForm>
    </div>
</div>


@code {
    [SupplyParameterFromForm]
    private UserLoginRequestDTO LoginModel { get; set; } = new();
    string ErrorMessage = "";
    public bool Isbusy { get; set; } = false;
    private bool Loading = false;

    [CascadingParameter]
    public Task<AuthenticationState> ClientAuthState { get; set; }
    protected override async Task OnInitializedAsync()
    {
        try
        {
            if ((await ClientAuthState!).User.Identity!.IsAuthenticated == true)
                NavManager.NavigateTo("/app/home", false, true);

        }
        catch (Exception)
        {
        }
    }

    private async Task LoginAsync()
    {
        Loading = true;
        if (Isbusy) return;
        ErrorMessage = "";
        Isbusy = true;
        var response = await AccountService.LoginAsync(LoginModel);
        if (!response.flag)
        {
            await InvokeAsync(() => StateHasChanged());
            await Task.Delay(3000);
            Isbusy = false;
            Loading = false;
            ErrorMessage = response.message;
            return;
        }
        else
        {
            //create session cookies


            //User user = await AccountService.getUser

            // if (user != null)
            // {
                // if (user.IsDeleted == true)
                // {
                //     Message = "Your account is disabled. Contact the system administrator.";

                //     Login = new LoginVM();
                //     return Page();
                // }

                // Microsoft.AspNetCore.Identity.SignInResult result = await _signInManager.PasswordSignInAsync(Login.UserName, Login.Password, Login.RememberMe, false);

                // if (!result.Succeeded)
                // {
                //     Message = "Username or Password is incorrect";

                //     Login = new LoginVM();
                //     return Page();
                // }

                // IdentityUserRole<int> userRole = _context.UserRoles.Where(u => u.UserId == user.Id).FirstOrDefault();
                // if (userRole == null)
                // {
                //     Message = "Role not assigned. Contact the system administrator.";

                //     Login = new LoginVM();
                //     return Page();
                // }

                // Role role = _context.Roles.Where(u => u.Id == userRole.RoleId).FirstOrDefault();

                // Get all root menu items associated with the role
                //List<Menu> listMenuId = await _context.RoleMenus.Where(u => u.RoleId == role.Id).Select(u => new Menu { MenuId = u.MenuId }).ToListAsync();


                // HttpContext.Session.SetObject("UserFullName", $"{user.FirstName} {user.LastName}");
                // HttpContext.Session.SetObject("UserId", user.Id);
                // HttpContext.Session.SetObject("RoleId", role.Id);
                // HttpContext.Session.SetObject("UserRole", role.Name);
                // HttpContext.Session.SetObject("UserRoleDescription", role.RoleDescription);
                // HttpContext.Session.SetObject("UserName", user.UserName);
                // HttpContext.Session.SetObject("Menu", _menuManager.GenerateMenuForCurrUser(role.Id));

                // switch (role.Name)
                // {
                //     case "CC":
                //         HttpContext.Session.SetObject("Summary", "Sales Summary");
                //         break;
                //     case "RBM":
                //         HttpContext.Session.SetObject("Summary", "Sales Summary");
                //         break;
                //     default:
                //         HttpContext.Session.SetObject("Summary", "National");
                //         break;
                // }

                //var LoginVM = new LoginVM();
                //LoginVM.Email = user.Email;
                //LoginVM.UserName = Login.UserName;
                //LoginVM.Password = Login.Password;

                //var authService = new AuthServices(_userManager, _context, _configuration);
                //var resultToken = await authService.GetTokenAsync(LoginVM);
                //AppHelper.SetRefreshTokenInCookie(resultToken.RefreshToken);

              //  }




        }
        await InvokeAsync(() => StateHasChanged());
        await Task.Delay(3000);
        Isbusy = false;
        Loading = false;
        NavManager.NavigateTo("/app/home", true);
    }
}
